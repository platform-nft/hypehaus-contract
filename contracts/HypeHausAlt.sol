// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract HypeHausAlt is ERC721Enumerable, ERC721URIStorage, Ownable {
    using Strings for uint256;
    using Counters for Counters.Counter;

    /**
     * @dev Emitted when a new HYPEhaus token is minted.
     */
    event MintHypeHaus(uint256 tokenId, address receiver);

    uint8 internal constant MAX_TOKENS_PER_OG_WALLET = 5;
    uint8 internal constant MAX_TOKENS_PER_COMMUNITY_WALLET = 3;
    uint8 internal constant MAX_TOKENS_PER_PUBLIC_WALLET = 3;

    uint256 internal constant COMMUNITY_SALE_PRICE = 0.05 ether;
    uint256 internal constant PUBLIC_SALE_PRICE = 0.08 ether;

    Counters.Counter internal _tokenIdCounter;
    uint256 internal immutable _maxSupply;
    string internal _baseURIString;

    constructor(uint256 maxSupply, string memory baseURIString)
        ERC721("HYPEhaus", "HYPE")
    {
        _maxSupply = maxSupply;
        _baseURIString = baseURIString;
    }

    function _salePrice() internal pure returns (uint256) {
        // TODO: Add logic to determine if a community sale or public sale is on
        // at the moment.
        return PUBLIC_SALE_PRICE;
    }

    function mintHypeHaus() external payable returns (uint256) {
        uint256 nextTokenId = _tokenIdCounter.current();
        require(nextTokenId < _maxSupply, "HypeHausAlt: Supply exhausted");
        require(msg.value >= _salePrice(), "HypeHausAlt: Not enough ETH");

        _safeMint(msg.sender, nextTokenId);
        emit MintHypeHaus(nextTokenId, msg.sender);
        _tokenIdCounter.increment();

        return nextTokenId;
    }

    // Necessary overrides (autogenerated by OpenZeppelin Contracts Wizard).

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function _burn(uint256 tokenId)
        internal
        override(ERC721, ERC721URIStorage)
    {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        require(_exists(tokenId), "HypeHausAlt: Nonexistent token");
        return
            string(
                abi.encodePacked(_baseURIString, tokenId.toString(), ".json")
            );
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
